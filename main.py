import logging
import re
import requests
import os
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ VIN
def is_valid_vin(vin: str) -> bool:
    return bool(re.fullmatch(r"[A-HJ-NPR-Z0-9]{17}", vin.upper()))

# –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ vin-01.ru
def get_vin_info(vin: str) -> str:
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        url = f"https://vin-01.ru/checks/{vin}"
        response = requests.get(url, headers=headers, timeout=10)

        if response.status_code != 200:
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ vin-01.ru."

        soup = BeautifulSoup(response.text, "html.parser")

        if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in soup.text.lower():
            return "‚ùå –ü–æ —ç—Ç–æ–º—É VIN –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        title = soup.find("h1").text.strip()

        # –°–±–æ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–ª–æ–∫–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_blocks = soup.select(".block-result")
        result_text = "\n\n".join(
            block.get_text(separator="\n", strip=True) for block in result_blocks
        )

        return f"üîç –û—Ç—á–µ—Ç –ø–æ VIN: {vin}\n\n{title}\n\n{result_text}"

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ VIN. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ VIN –Ω–æ–º–µ—Ä (17 —Å–∏–º–≤–æ–ª–æ–≤), –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ üöó"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ VIN
async def handle_vin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    vin = update.message.text.strip().upper()

    if not is_valid_vin(vin):
        await update.message.reply_text("‚ùó –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π VIN (17 —Å–∏–º–≤–æ–ª–æ–≤, –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã).")
        return

    await update.message.reply_text("üîé –ò—â—É –¥–∞–Ω–Ω—ã–µ –ø–æ VIN... –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ ‚è≥")
    info = get_vin_info(vin)
    await update.message.reply_text(info)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_vin))
    app.run_polling()

if __name__ == "__main__":
    main()
