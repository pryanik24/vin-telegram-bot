import logging
import re
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

import os  # –¥–æ–±–∞–≤—å –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç

TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
if not TELEGRAM_TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)


# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ VIN
def is_valid_vin(vin: str) -> bool:
    return bool(re.fullmatch(r"[A-HJ-NPR-Z0-9]{17}", vin.upper()))

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ VIN —Å VIN01.ru (–µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è, –∏–Ω–∞—á–µ —Ñ–µ–π–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç)
def get_vin_info(vin: str) -> str:
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        url = f"https://vin-01.ru/checks/{vin}"
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200 and "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VIN" in response.text:
            return f"üîç –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ VIN: {vin}\n(—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ç—É—Ç)"
        else:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–º—É VIN. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ VIN: {e}")
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É VIN."

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ VIN –Ω–æ–º–µ—Ä, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ üöó"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ VIN
async def handle_vin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    vin = update.message.text.strip().upper()
    
    if not is_valid_vin(vin):
        await update.message.reply_text("‚ùó –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π VIN (17 —Å–∏–º–≤–æ–ª–æ–≤, –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã).")
        return
    
    await update.message.reply_text("üîé –ò—â—É –¥–∞–Ω–Ω—ã–µ –ø–æ VIN... –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ ‚è≥")
    info = get_vin_info(vin)
    await update.message.reply_text(info)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_vin))
    app.run_polling()

if __name__ == "__main__":
    main()